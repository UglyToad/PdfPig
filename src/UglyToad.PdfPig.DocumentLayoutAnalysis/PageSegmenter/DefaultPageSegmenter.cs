namespace UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter
{
    using Content;
    using Core;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Default Page Segmenter. All words are included in one block.
    /// </summary>
    public class DefaultPageSegmenter : IPageSegmenter
    {
        private readonly DefaultPageSegmenterOptions options;

        /// <summary>
        /// Create an instance of default page segmenter, <see cref="DefaultPageSegmenter"/>.
        /// </summary>
        public static DefaultPageSegmenter Instance { get; } = new DefaultPageSegmenter();

        /// <summary>
        /// using default options values.
        /// </summary>
        public DefaultPageSegmenter() : this(new DefaultPageSegmenterOptions())
        {
        }

        /// <summary>
        /// Create using options values.
        /// </summary>
        /// <param name="options">The <see cref="DefaultPageSegmenterOptions"/> to use.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DefaultPageSegmenter(DefaultPageSegmenterOptions options)
        {
            this.options = options ?? throw new ArgumentNullException(nameof(options));
        }

        /// <summary>
        /// Get the text blocks using options.
        /// </summary>
        /// <param name="words">The page's words to generate text blocks for.</param>
        /// <returns>The <see cref="TextBlock"/>s generated by the default method.</returns>
        public IReadOnlyList<TextBlock> GetBlocks(IEnumerable<Word> words)
        {
            if (words?.Any() != true)
            {
                return Array.Empty<TextBlock>();
            }

            var lineSegmenter = CreateLineSegmenterFn(options);
            var lines = lineSegmenter(words, options.WordSeparator).ToArray();
            return new List<TextBlock>() { new TextBlock(lines, options.LineSeparator) };
        }

        private static Func<IEnumerable<Word>, string, IEnumerable<TextLine>> CreateLineSegmenterFn(
            DefaultPageSegmenterOptions options)
        {
            Func<IEnumerable<Word>, string, IEnumerable<TextLine>> lineSegmenter;
            if (options.LineSegmenter != null)
            {
                lineSegmenter = options.LineSegmenter;
            }
            else if (options.DefaultLineSegementerTolerenace != 0d)
            {
                var lineSegementerWTolerance = new DefaultLineSegmenter(options.DefaultLineSegementerTolerenace);
                lineSegmenter = lineSegementerWTolerance.GetLines;
            }
            else
            {
                lineSegmenter = DefaultLineSegmenter.Instance.GetLines;
            }

            return lineSegmenter;
        }

        /// <summary>
        /// Default page segmenter options.
        /// </summary>
        public class DefaultPageSegmenterOptions : IPageSegmenterOptions
        {
            /// <summary>
            /// <inheritdoc/>
            /// Default value is -1.
            /// </summary>
            public int MaxDegreeOfParallelism { get; set; } = -1;

            /// <summary>
            /// <inheritdoc/>
            /// <para>Default value is ' ' (space).</para>
            /// </summary>
            public string WordSeparator { get; set; } = " ";

            /// <summary>
            /// <inheritdoc/>
            /// <para>Default value is '\n' (new line).</para>
            /// </summary>
            public string LineSeparator { get; set; } = "\n";

            /// <summary>
            /// The tolerance on the default Line segmenter
            /// </summary>
            public double DefaultLineSegementerTolerenace = 0d;

            /// <summary>
            /// The line segmenter function called to convert the words into lines. 
            /// <para>The second parameter passed to the function will be the <see cref="WordSeparator"/>.</para>
            /// </summary>
            public Func<IEnumerable<Word>, string, IEnumerable<TextLine>> LineSegmenter { get; set; } = null;
        }
    }
}